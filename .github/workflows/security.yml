name: Security Scan

# Required permissions for security scanning
permissions:
  contents: read          # Read repository contents
  security-events: write  # Write to GitHub Security tab
  pull-requests: write    # Comment on PRs with findings
  actions: read          # Read workflow status

# Run security scans on pull requests only
on:
  pull_request:
  # Allow manual runs
  workflow_dispatch:

jobs:
  gitleaks:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
    # Full checkout for comprehensive secret detection
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Detect secrets, API keys, tokens in code and git history
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  bearer:
    name: Security & Privacy Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Static analysis for security vulnerabilities and privacy issues
    - name: Run Bearer
      uses: bearer/bearer-action@v2
      with:
        # Bearer token is optional for public repos
        api-key: ${{ secrets.BEARER_TOKEN }}
        format: sarif
        output: bearer-results.sarif
      continue-on-error: true

    # Upload results to GitHub Security tab
    - name: Upload Bearer SARIF
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: bearer-results.sarif

  terraform-security:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Setup Terraform for validation
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    # Initialize Terraform to download providers (backend config not needed for validation)
    - name: Terraform Init
      run: terraform init -backend=false
      working-directory: ./terraform

    # Validate Terraform configuration
    - name: Terraform Format Check
      run: terraform fmt -check
      working-directory: ./terraform
      continue-on-error: true

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform

    # Security scan for Terraform files using tfsec
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform
        format: sarif
        soft_fail: true
      continue-on-error: true

    # Upload tfsec results only if SARIF file exists
    - name: Upload tfsec SARIF
      if: hashFiles('tfsec.sarif') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: tfsec.sarif